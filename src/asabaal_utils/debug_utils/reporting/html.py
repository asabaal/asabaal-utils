"""HTML report generation for Debug Session Tracker.

This module provides classes for generating HTML reports from debug sessions.
"""

import os
from datetime import datetime
from typing import Dict, List, Any, Optional, TextIO

from ..session.session import DebugSession
from .markdown import MarkdownReport


class HTMLReport:
    """HTML report generator for debug sessions.

    This class generates HTML reports from debug sessions, including
    diagnostics, issues, fixes, and other session information.

    Attributes:
        session: The debug session to generate a report for
    """

    def __init__(self, session: DebugSession):
        """Initialize the HTML report generator.

        Args:
            session: The debug session to generate a report for
        """
        self.session = session
        self.markdown_report = MarkdownReport(session)

    def generate(self) -> str:
        """Generate an HTML report.

        This method generates an HTML report by converting the Markdown report
        to HTML and adding CSS styling.

        Returns:
            HTML report as a string
        """
        # Get the Markdown report
        markdown = self.markdown_report.generate()
        
        # Convert Markdown to HTML (simplified version)
        html_body = self._markdown_to_html(markdown)
        
        # Combine with HTML head and styling
        html = self._generate_html_template(html_body)
        
        return html

    def _generate_html_template(self, body: str) -> str:
        """Generate HTML template with styling.

        Args:
            body: HTML body content

        Returns:
            Complete HTML document
        """
        title = f"Debug Session Report: {self.session.name}"
        
        return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }}
        h1, h2, h3, h4 {{
            color: #2c3e50;
            margin-top: 1.5em;
            margin-bottom: 0.5em;
        }}
        h1 {{
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
        }}
        code {{
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 3px;
            font-family: monospace;
            padding: 2px 4px;
        }}
        pre {{
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 3px;
            padding: 10px;
            overflow-x: auto;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        .severity-critical {{
            color: #e74c3c;
            font-weight: bold;
        }}
        .severity-high {{
            color: #e67e22;
            font-weight: bold;
        }}
        .severity-medium {{
            color: #f1c40f;
        }}
        .severity-low {{
            color: #2ecc71;
        }}
        .status-successful {{
            color: #2ecc71;
            font-weight: bold;
        }}
        .status-failed {{
            color: #e74c3c;
            font-weight: bold;
        }}
        .status-fixed {{
            color: #2ecc71;
        }}
        .status-unfixed {{
            color: #e74c3c;
        }}
        .summary-box {{
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
        }}
        .metadata {{
            color: #7f8c8d;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    {body}
    <footer>
        <hr>
        <p class="metadata">Generated by Debug Session Tracker on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </footer>
</body>
</html>"""

    def _markdown_to_html(self, markdown: str) -> str:
        """Convert Markdown to HTML.

        This is a simplified Markdown to HTML converter that handles basic
        Markdown syntax. For a real implementation, you would use a library
        like `markdown`.

        Args:
            markdown: Markdown content

        Returns:
            HTML content
        """
        try:
            # Try to use the markdown library if available
            import markdown
            return markdown.markdown(markdown)
        except ImportError:
            # Fall back to a very simple implementation
            html = []
            in_list = False
            in_code_block = False
            
            for line in markdown.split('\n'):
                # Headers
                if line.startswith('# '):
                    html.append(f'<h1>{line[2:]}</h1>')
                elif line.startswith('## '):
                    html.append(f'<h2>{line[3:]}</h2>')
                elif line.startswith('### '):
                    html.append(f'<h3>{line[4:]}</h3>')
                elif line.startswith('#### '):
                    html.append(f'<h4>{line[5:]}</h4>')
                
                # Lists
                elif line.startswith('- '):
                    if not in_list:
                        html.append('<ul>')
                        in_list = True
                    html.append(f'<li>{line[2:]}</li>')
                elif line.startswith('1. '):
                    if not in_list:
                        html.append('<ol>')
                        in_list = True
                    html.append(f'<li>{line[3:]}</li>')
                elif in_list and not line.strip():
                    html.append('</ul>' if html[-1].startswith('<li>') else '</ol>')
                    in_list = False
                
                # Code blocks
                elif line.startswith('```'):
                    if in_code_block:
                        html.append('</code></pre>')
                        in_code_block = False
                    else:
                        language = line[3:]
                        html.append(f'<pre><code class="language-{language}">')
                        in_code_block = True
                elif in_code_block:
                    html.append(line)
                
                # Paragraphs
                elif not line.strip():
                    if in_list:
                        html.append('</ul>' if html[-1].startswith('<li>') else '</ol>')
                        in_list = False
                    html.append('<p></p>')
                else:
                    # Apply inline formatting
                    formatted_line = line
                    
                    # Bold
                    while '**' in formatted_line:
                        formatted_line = formatted_line.replace('**', '<strong>', 1)
                        formatted_line = formatted_line.replace('**', '</strong>', 1)
                    
                    # Italic
                    while '*' in formatted_line:
                        formatted_line = formatted_line.replace('*', '<em>', 1)
                        formatted_line = formatted_line.replace('*', '</em>', 1)
                    
                    # Code
                    while '`' in formatted_line:
                        formatted_line = formatted_line.replace('`', '<code>', 1)
                        formatted_line = formatted_line.replace('`', '</code>', 1)
                    
                    # Add severity classes
                    formatted_line = self._add_severity_classes(formatted_line)
                    
                    html.append(formatted_line)
            
            return '\n'.join(html)

    def _add_severity_classes(self, line: str) -> str:
        """Add CSS classes for severity and status styling.

        Args:
            line: HTML line

        Returns:
            HTML line with added CSS classes
        """
        # Add severity classes
        for severity in ['critical', 'high', 'medium', 'low']:
            if f"**{severity.capitalize()}:**" in line:
                line = line.replace(
                    f"**{severity.capitalize()}:**",
                    f"<span class=\"severity-{severity}\">{severity.capitalize()}:</span>"
                )
        
        # Add status classes
        for status in [('Successful', 'successful'), ('Failed', 'failed'), ('Fixed', 'fixed'), ('Unfixed', 'unfixed')]:
            display, class_name = status
            if f"**{display}:**" in line:
                line = line.replace(
                    f"**{display}:**",
                    f"<span class=\"status-{class_name}\">{display}:</span>"
                )
        
        return line

    def save(self, file_path: str) -> bool:
        """Save the report to a file.

        Args:
            file_path: Path where the report will be saved

        Returns:
            True if the report was saved successfully, False otherwise
        """
        try:
            with open(file_path, 'w') as f:
                f.write(self.generate())
            return True
        except Exception as e:
            print(f"Error saving report: {e}")
            return False
