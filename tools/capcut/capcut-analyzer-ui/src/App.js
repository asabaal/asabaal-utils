import React, { useState, useEffect } from 'react';
import { Navbar, Container, Tabs, Tab, Button, Form } from 'react-bootstrap';
import Dashboard from './components/Dashboard';
import Timeline from './components/Timeline';
import MediaAnalysis from './components/MediaAnalysis';
import UnusedMedia from './components/UnusedMedia';
import FilePathAnalysis from './components/FilePathAnalysis';
import { analyzeProjectData, findUnusedMedia } from './utils/projectAnalyzer';

function App() {
  const [projectData, setProjectData] = useState(null);
  const [analyzedData, setAnalyzedData] = useState(null);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Handle file upload
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setIsLoading(true);
    setError(null);

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const jsonData = JSON.parse(e.target.result);
        setProjectData(jsonData);
        
        // Analyze the project data
        const analyzed = analyzeProjectData(jsonData);
        analyzed.unusedMedia = findUnusedMedia(jsonData);
        setAnalyzedData(analyzed);
        setIsLoading(false);
      } catch (err) {
        console.error('Error parsing JSON:', err);
        setError('Invalid JSON file. Please upload a valid CapCut project analysis file.');
        setIsLoading(false);
      }
    };
    
    reader.onerror = () => {
      setError('Error reading file');
      setIsLoading(false);
    };
    
    reader.readAsText(file);
  };

  // Load sample data for development
  const loadSampleData = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/sample-data.json');
      if (!response.ok) {
        throw new Error('Failed to load sample data');
      }
      
      const jsonData = await response.json();
      setProjectData(jsonData);
      
      // Analyze the project data
      const analyzed = analyzeProjectData(jsonData);
      analyzed.unusedMedia = findUnusedMedia(jsonData);
      setAnalyzedData(analyzed);
    } catch (err) {
      console.error('Error loading sample data:', err);
      setError('Failed to load sample data');
    }
    
    setIsLoading(false);
  };

  return (
    <div className="app-container">
      <Navbar bg="dark" variant="dark" expand="lg" className="mb-4">
        <Container>
          <Navbar.Brand>
            <i className="fas fa-film me-2"></i>
            CapCut Project Analyzer
          </Navbar.Brand>
          {analyzedData && (
            <span className="text-light">
              {analyzedData.projectName || 'Project Analysis'}
            </span>
          )}
        </Container>
      </Navbar>

      <Container fluid>
        {!projectData ? (
          <div className="row justify-content-center">
            <div className="col-md-6">
              <div className="card">
                <div className="card-header">
                  <h5 className="mb-0">Upload Project Analysis File</h5>
                </div>
                <div className="card-body">
                  <p>
                    Upload a <code>project_structure_analysis.json</code> file generated by the 
                    <code>analyze-project</code> tool to visualize your CapCut project structure.
                  </p>
                  
                  <Form.Group controlId="formFile" className="mb-3">
                    <Form.Label>Select Project Analysis JSON File</Form.Label>
                    <Form.Control 
                      type="file" 
                      accept=".json" 
                      onChange={handleFileUpload}
                      disabled={isLoading}
                    />
                  </Form.Group>
                  
                  {error && (
                    <div className="alert alert-danger">{error}</div>
                  )}
                  
                  {isLoading && (
                    <div className="text-center my-3">
                      <div className="spinner-border text-primary" role="status">
                        <span className="visually-hidden">Loading...</span>
                      </div>
                      <p className="mt-2">Processing project data...</p>
                    </div>
                  )}
                  
                  <div className="d-flex justify-content-between mt-3">
                    <Button 
                      variant="outline-secondary" 
                      onClick={loadSampleData}
                      disabled={isLoading}
                    >
                      Load Sample Data
                    </Button>
                    
                    <Button 
                      variant="primary" 
                      onClick={() => document.getElementById('formFile').click()}
                      disabled={isLoading}
                    >
                      Select File
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div>
            <Tabs
              activeKey={activeTab}
              onSelect={(k) => setActiveTab(k)}
              className="mb-4 tabs-container"
            >
              <Tab eventKey="dashboard" title="Dashboard">
                <Dashboard data={analyzedData} />
              </Tab>
              <Tab eventKey="timeline" title="Timeline">
                <Timeline data={analyzedData} />
              </Tab>
              <Tab eventKey="media" title="Media Analysis">
                <MediaAnalysis data={analyzedData} />
              </Tab>
              <Tab eventKey="unused" title="Unused Media">
                <UnusedMedia data={analyzedData} />
              </Tab>
              <Tab eventKey="paths" title="File Path Analysis">
                <FilePathAnalysis data={analyzedData} />
              </Tab>
            </Tabs>
          </div>
        )}
      </Container>
    </div>
  );
}

export default App;